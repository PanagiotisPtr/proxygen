package {{ .PackageName }}

import (
	"context"

    "github.com/panagiotisptr/proxygen/interceptor"

{{- range $import := .Imports }}
    {{ $import }}
{{- end }}
)

type {{ .Name }} struct {
	Implementation {{ .InterfacePackage }}.{{ .InterfaceName }}
	Interceptor    interceptor.Interceptor
}

{{ range $method := .Methods }}

func (this *{{ $.Name }}) {{ $method.Name }}(
{{ range $idx, $param := $method.Params }}
   arg{{ $idx }} {{ $param }},
{{end}}
) (
{{ range $ret := $method.Rets }}
   {{ $param }},
{{end}}
) {
	rets := this.Interceptor(
		[]interface{}{
        {{ range $idx, $param := $method.Params }}
           arg{{ $idx }},
        {{end}}
        },
		"{{ $method.Name }}",
		func(args []interface{}) []interface{} {
            {{- range $idx, $ret := $method.Rets -}}
                    {{- if ne $idx 0 }}, {{ end -}}
                    res{{ $idx }}
            {{- end -}} := this.Implementation.Create(
                {{ range $idx, $param := $method.Params }}
                   arg[{{ $idx }}].({{$param}}),
                {{end}}
			)

			return []interface{}{
            {{range $idx, $ret := $method.Rets}}
                    arg{{ $idx }} {{ $ret }},
            {{end}}
            }
		},
	)

    return {{- range $idx, $ret := $method.Rets -}}
                    {{- if ne $idx 0 }}, {{ end -}}
                    res[{{ $idx }}].($ret)
            {{- end -}}
}

{{end}}
